// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Schedule {
  id          String    @id @db.Char(32)
  startTime   DateTime? @map("start_time") @db.Date
  endTime     DateTime? @map("end_time") @db.Date
  stageId     Int?      @map("stage_id") @db.SmallInt
  bossId      Int?      @map("boss_id") @db.SmallInt
  weaponList  Int[]     @map("weapon_list") @db.SmallInt
  mode        String
  rule        String
  rareWeapons Int[]     @map("rare_weapons") @db.SmallInt
  createdAt   DateTime  @default(now()) @db.Date
  updatedAt   DateTime  @updatedAt @db.Date

  results Result[] @relation("results")

  @@index([stageId])
  @@index([bossId])
  @@index([mode])
  @@index([rule])
  @@map("schedules")
}

model Result {
  id                   String   @id @db.Char(32)
  uuid                 String   @map("uuid") @db.Uuid
  playTime             DateTime @map("play_time") @db.Date
  bossCounts           Int[]    @map("boss_counts") @db.SmallInt
  bossKillCounts       Int[]    @map("boss_kill_counts") @db.SmallInt
  ikuraNum             Int      @map("ikura_num") @db.SmallInt
  goldenIkuraNum       Int      @map("golden_ikura_num") @db.SmallInt
  goldenIkuraAssistNum Int      @map("golden_ikura_assist_num") @db.SmallInt
  nightLess            Boolean  @map("night_less") @db.Boolean
  dangerRate           Decimal  @map("danger_rate") @db.Decimal(4, 3)
  members              String[] @db.Char(20)
  bronze               Int?     @db.SmallInt
  silver               Int?     @db.SmallInt
  gold                 Int?     @db.SmallInt
  isClear              Boolean  @map("is_clear") @db.Boolean
  failureWave          Int?     @map("failure_wave") @db.SmallInt
  isBossDefeated       Boolean? @map("is_boss_defeated") @db.Boolean
  isGiantDefeated      Boolean? @map("is_giant_defeated") @db.Boolean
  isRopeDefeated       Boolean? @map("is_rope_defeated") @db.Boolean
  isJawDefeated        Boolean? @map("is_jaw_defeated") @db.Boolean
  scenarioCode         String?  @map("scenario_code")
  createdAt            DateTime @default(now()) @db.Date
  updatedAt            DateTime @updatedAt @db.Date

  schedule   Schedule @relation("results", fields: [scheduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scheduleId String   @map("schedule_id") @db.Char(32)
  players    Player[] @relation("players")
  waves      Wave[]   @relation("waves")

  @@index([isClear])
  @@map("results")
}

model Wave {
  id                String   @id @db.Char(32)
  uuid              String   @map("uuid") @db.Uuid
  playTime          DateTime @map("play_time") @db.Date
  waveId            Int      @map("wave_id") @db.SmallInt
  waterLevel        Int      @map("water_level") @db.SmallInt
  eventType         Int      @map("event_type") @db.SmallInt
  goldenIkuraNum    Int?     @map("golden_ikura_num") @db.SmallInt
  goldenIkuraPopNum Int      @map("golden_ikura_pop_num") @db.SmallInt
  quotaNum          Int?     @map("quota_num") @db.SmallInt
  isClear           Boolean  @map("is_clear") @db.Boolean
  createdAt         DateTime @default(now()) @db.Date
  updatedAt         DateTime @updatedAt @db.Date
  result            Result   @relation("waves", fields: [resultId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resultId          String   @map("result_id") @db.Char(32)

  @@index([waterLevel, eventType])
  @@index([isClear])
  @@map("waves")
}

model Player {
  id                   String   @id @db.Char(32)
  uuid                 String   @map("uuid") @db.Uuid
  nplnUserId           String   @map("npln_user_id") @db.Char(20)
  playTime             DateTime @map("play_time") @db.Date
  name                 String
  byname               String   @map("by_name")
  nameId               String   @map("name_id")
  badges               Int[]
  nameplateId          Int      @map("nameplate") @db.SmallInt
  textColor            Int[]    @map("text_color")
  uniform              Int      @db.SmallInt
  bossKillCountsTotal  Int      @map("boss_kill_counts_total") @db.SmallInt
  bossKillCounts       Int[]    @map("boss_kill_counts") @db.SmallInt
  deadCount            Int      @map("dead_count") @db.SmallInt
  helpCount            Int      @map("help_count") @db.SmallInt
  ikuraNum             Int      @map("ikura_num") @db.SmallInt
  goldenIkuraNum       Int      @map("golden_ikura_num") @db.SmallInt
  goldenIkuraAssistNum Int      @map("golden_ikura_assist_num") @db.SmallInt
  jobBonus             Int?     @map("job_bonus_rate") @db.SmallInt
  jobRate              Int      @map("job_rate") @db.SmallInt
  jobScore             Int?     @map("job_score") @db.SmallInt
  kumaPoint            Int?     @map("kuma_point") @db.SmallInt
  gradeId              Int?     @map("grade_id") @db.SmallInt
  gradePoint           Int?     @map("grade_point") @db.SmallInt
  smellMeter           Int?     @map("smell_meter") @db.SmallInt
  species              String
  specialId            Int?     @map("special_id") @db.SmallInt
  specialCount         Int[]    @map("special_count") @db.SmallInt
  createdAt            DateTime @default(now()) @db.Date
  updatedAt            DateTime @updatedAt @db.Date
  result               Result   @relation("players", fields: [resultId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resultId             String   @map("result_id") @db.Char(32)

  @@index([nplnUserId])
  @@index([name])
  @@index([ikuraNum])
  @@index([goldenIkuraNum])
  @@map("players")
}
